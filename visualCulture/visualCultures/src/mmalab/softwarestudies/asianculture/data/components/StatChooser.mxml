<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/halo"
		   xmlns:mate="http://mate.asfusion.com/"
		   initialize="onInitialize()" width="100%" height="100%" xmlns:local="*" xmlns:components="mmalab.softwarestudies.asianculture.data.components.*">
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.ioc.InjectorRegistry;
			
			import flash.events.Event;
			
			import mmalab.softwarestudies.asianculture.Constants;
			import mmalab.softwarestudies.asianculture.data.events.ChooseStatisticsEvent;
			import mmalab.softwarestudies.asianculture.graph.events.ChangeGraphStyleEvent;
			import mmalab.softwarestudies.asianculture.graph.events.ChangePlotItemsEvent;
			import mmalab.softwarestudies.asianculture.graph.models.GraphType;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			
			[Bindable]
			public var statsList:Array;
			[Bindable]
			public var fullStatsList:Array;
			[Bindable]
			public var graphStyle:String;
			
			[Bindable]
			public var dim:int = 2;
			
			[Bindable]
			private var altColors:Array = new Array();
			
			[Bindable]
			private var maxPageNum:int;
			
			private function onInitialize() : void
			{
				//------------------------------------------------------------------
				// Necessary hack to be able to inject data in view inside a window
				// http://mate.asfusion.com/forums/topic.php?id=274
				//------------------------------------------------------------------
				InjectorRegistry.register(this);
				
				updateAltColorsByDim();
				
				var changeGraphStyleEvent:ChangeGraphStyleEvent = new ChangeGraphStyleEvent(ChangeGraphStyleEvent.CHANGE_GRAPH_STYLE_EVENT);
				changeGraphStyleEvent.graphStyle = graphTypeCombo.selectedLabel as String;
				FlexGlobals.topLevelApplication.dispatchEvent(changeGraphStyleEvent);
			}
			
			protected function updateMaxPageNum():void
			{
				// calculate maximum page number for sequential graphs
				var graphPerPage:int = parseInt(numStatsInput.text);
				maxPageNum = 1;				
				if (graphPerPage != 0 && fullStatsList != null) {
					for (var i:int=0; i<dim; i++) {
						maxPageNum *= fullStatsList.length-i;
					}
					maxPageNum = maxPageNum / graphPerPage / dim + 1;
				}
			}
			
			protected function updateAltColorsByDim():void {
				altColors = new Array();
				for (var i:int=0; i<dim; i++)
					altColors.push(0xFFFFFF);
				for (i=0; i<dim; i++)
					altColors.push(0xCEDBEF);
			}
						
			public function numStatListener(event:ChooseStatisticsEvent):void {
				numSelected.text="Selected: " + statsList.length;
			}
			
			protected function stats_dragDropHandler(event:DragEvent):void
			{
				// Cancel the drop on the full list
				event.preventDefault();
			}
			
			private function updateBtn_clickHandler(event:MouseEvent):void
			{
				var chooseStatEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_STATS_EVENT);
				chooseStatEvent.statsList = (selectedStats.dataProvider as ArrayCollection).toArray();
				chooseStatEvent.maxNumObjects = parseInt(maxNumObjectsInput.text);
				chooseStatEvent.dim = dim;
				chooseStatEvent.graphStyle = graphTypeCombo.selectedLabel;
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatEvent);
			}
			
			private function leftBtn_clickHandler(event:MouseEvent):void
			{
				for each (var itemIdx:int in selectedStats.selectedIndices) {
					selectedStats.dataProvider.removeItemAt(itemIdx);
				}
			}
			
			private function rightBtn_clickHandler(event:MouseEvent):void
			{
				for each (var item:Object in availableStats.selectedItems) {
					// var temp:Object = ObjectUtil.copy(item);
					
					var copy:Object = new Object();
					for( var key:Object in item ) {
						// avoid copying the mx_interval_uid so it won't mess up the list's dataProvider
						if (  ( 'mx_internal_uid' != key ) ) {
							copy[ key ] = item[ key ];
						}
					}
					selectedStats.dataProvider.addItem(copy);
				}
			}
			
			private function randomGraphs_clickHandler(event:MouseEvent):void
			{
				var chooseStatsEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_RANDOM_STATS_EVENT);
				chooseStatsEvent.numStats = parseInt(numStatsInput.text) * dim;
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatsEvent);
			}
			
			
			protected function sequenceGraph_clickHandler(event:MouseEvent):void
			{
				var chooseStatsEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_SEQUENCE_STATS_EVENT);
				chooseStatsEvent.page = parseInt(pageNum.text);
				chooseStatsEvent.numStats = parseInt(numStatsInput.text);
				chooseStatsEvent.graphStyle = graphTypeCombo.selectedLabel;
				
				updateMaxPageNum();
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatsEvent);
			}
			
			
			protected function previousNextPage(next:Boolean):void
			{
				if (next)
					pageNum.text = (parseInt(pageNum.text) + 1).toString();
				else
					pageNum.text = (parseInt(pageNum.text) - 1).toString();
				var chooseStatsEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_SEQUENCE_STATS_EVENT);
				chooseStatsEvent.page = parseInt(pageNum.text);
				chooseStatsEvent.numStats = parseInt(numStatsInput.text);
				chooseStatsEvent.graphStyle = graphTypeCombo.selectedLabel;
				
				updateMaxPageNum();
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatsEvent);
			}
			

			protected function graphTypeCombo_changeHandler(event:ListEvent):void
			{
				var i:int=0;
				while (event.currentTarget.selectedLabel != (Constants.GRAPH_TYPES[i] as GraphType).name && i<Constants.GRAPH_TYPES.length) {
					i++;
				}
				dim = (Constants.GRAPH_TYPES[i] as GraphType).dim;
				
				updateAltColorsByDim();
				var changeGraphStyleEvent:ChangeGraphStyleEvent = new ChangeGraphStyleEvent(ChangeGraphStyleEvent.CHANGE_GRAPH_STYLE_EVENT);
				changeGraphStyleEvent.graphStyle = event.currentTarget.selectedLabel as String;
				FlexGlobals.topLevelApplication.dispatchEvent(changeGraphStyleEvent);
			}


			protected function checkbox1_changeHandler(event:Event):void
			{
				var changePlotItemsEvent:ChangePlotItemsEvent = new ChangePlotItemsEvent(ChangePlotItemsEvent.CHANGE_PLOT_ITEMS_EVENT);
				changePlotItemsEvent.renderer = imgOrPointCheckbox.selected?"images":"points";
				FlexGlobals.topLevelApplication.dispatchEvent(changePlotItemsEvent);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<!-- necessary to bubble up events -->
		<mate:LocalEventMap dispatcher="{this}" />
		
	</fx:Declarations>
		
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle" />
			</s:layout>
			
			<s:Group width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:Label text="Available Statistics" verticalAlign="middle" width="100%" height="24" fontWeight="bold"/>
				<!-- dragNdrop not yet available in spark lists of Flex 4 beta 2 -->
				<mx:List id="availableStats"
						 dataProvider="{fullStatsList}"
						 allowMultipleSelection="true"
						 labelField="name"
						 dragEnabled="true"
						 dropEnabled="true"
						 alternatingItemColors="[0xFFFFFF, 0xEEEEFF]"
						 width="100%" height="100%" dragDrop="stats_dragDropHandler(event)"/>
				<s:Label text="Number of stats available: {fullStatsList.length}"  textAlign="right"/>
			</s:Group>
			<s:Group >
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<mx:Image id="leftBtn" source="@Embed('images/arrowSmall.jpg')" rotation="90" click="leftBtn_clickHandler(event)" />
				<mx:Image id="rightBtn" source="@Embed('images/arrowSmall.jpg')" rotation="-90" click="rightBtn_clickHandler(event)" />
			</s:Group>
			<s:Group width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<mx:ComboBox id="graphTypeCombo" dataProvider="{Constants.GRAPH_TYPES}" labelField="name" change="graphTypeCombo_changeHandler(event)" />
				<s:CheckBox id="imgOrPointCheckbox" label="images" change="checkbox1_changeHandler(event)" />
				<s:Label text="Statistics to display (by tuples of {dim})" verticalAlign="middle" width="100%" height="24" fontWeight="bold"/>
				<!-- dragNdrop not yet available in spark lists of Flex 4 beta 2 -->
				<mx:List id="selectedStats"
						 dataProvider="{statsList}"
						 allowMultipleSelection="true"
						 labelField="name"
						 dragEnabled="true"
						 dropEnabled="true"
						 dragMoveEnabled="true"
						 width="100%" height="100%"
						 alternatingItemColors="{altColors}">
						 <!--itemRenderer="SelectedLineItemRenderer"-->
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{dimArray.getItemAt(counter%outerDocument.dim)}: {statName}" creationComplete="label1_creationCompleteHandler(event)">
								<fx:Script>
									<![CDATA[
										import mx.events.FlexEvent;
										import mx.collections.ArrayCollection;
										import mx.controls.List;
										import mx.binding.utils.ChangeWatcher;
										import mx.events.PropertyChangeEvent;
										
										private var dataWatcher:ChangeWatcher;

										// limited to max 6 dimensions
										[Bindable]
										private var dimArray:ArrayCollection = new ArrayCollection(['x', 'y', 't', 'a', 'b', 'c']);
										
										[Bindable]
										private var counter:int=0;
										
										[Bindable]
										private var statName:String;
										
										override protected function updateDisplayList(unscaledWidth:Number,                     
																					  unscaledHeight:Number):void
										{
											super.updateDisplayList(unscaledWidth, unscaledHeight);
											
											var ow:List = owner as List;
											var dataIndex:int = ow.itemRendererToIndex(this);
											if (dataIndex>=0)
												counter = dataIndex;
										}

										private function dataChangeHandler(event:Event=null):void {
											if (data)
												this.statName = data.name;
										}
										
										protected function label1_creationCompleteHandler(event:FlexEvent):void
										{
											this.dataWatcher = ChangeWatcher.watch(this, 'data', dataChangeHandler);
											this.dataChangeHandler();
										}

									]]>
								</fx:Script>
							</mx:Label>
						</fx:Component>
					</mx:itemRenderer>
				</mx:List>
				<s:Label id="numSelected" text="Selected: {selectedStats.dataProvider.length}"  textAlign="right" />
			</s:Group>
		</s:Group>
		<s:Group width="100%" height="24">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Label text="Number of graphs: " verticalAlign="middle" height="100%" fontWeight="normal" fontSize="12"/>
			<s:TextInput id="numStatsInput" width="24" text="6"/>
			<s:Label text="Max number of objects*: " verticalAlign="middle" height="100%" fontWeight="normal" fontSize="12"/>
			<s:TextInput id="maxNumObjectsInput" width="24" text="0" />
			<s:Button  id="randomGraphs" label="Random graphs" enabled="true" click="randomGraphs_clickHandler(event)"/>					
		</s:Group>
		<s:Group width="100%" height="24">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Button  id="previous" label="&lt;&lt;" enabled="true" click="previousNextPage(false)" width="35"/>			
			<s:Label text="Page number*: " verticalAlign="middle" height="100%" fontWeight="normal" fontSize="12"/>
			<s:TextInput id="pageNum" width="24" text="0" />
			<s:Label text=" / {maxPageNum}" verticalAlign="middle" height="100%" fontWeight="normal" fontSize="12"/>
			<s:Button  id="sequenceGraph" label="Seq. graphs" enabled="true" click="sequenceGraph_clickHandler(event)"/>			
			<s:Button  id="next" label=">>" enabled="true" click="previousNextPage(true)" width="35"/>			
			<s:Label text="* put 0 for all" verticalAlign="middle" height="100%" fontStyle="italic" fontSize="12"/>
		</s:Group>
		<s:Group width="100%" height="24">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Label text="Note: last Stat(s) will be ignored if number of items is not a multiple of {dim}." fontStyle="italic" verticalAlign="middle" height="100%" />
			<mx:Spacer width="100%" />
			<s:Button label="Update" id="updateBtn" click="updateBtn_clickHandler(event)" width="60" />
			<!--s:Button label="Close" id="closeBtn" click="this.close()" width="55" /-->
		</s:Group>
	</s:Group>
