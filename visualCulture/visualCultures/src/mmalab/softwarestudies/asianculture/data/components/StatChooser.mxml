<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/halo"
		  xmlns:mate="http://mate.asfusion.com/"
		  initialize="onInitialize()"
		  width="600" height="600" >
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.ioc.InjectorRegistry;
			
			import flash.events.MouseEvent;
			
			import mmalab.softwarestudies.asianculture.data.event.ChooseStatisticsEvent;
			import mmalab.softwarestudies.asianculture.data.models.Statistic;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.DragEvent;
			
			[Bindable]
			public var statsList:Array;
			[Bindable]
			public var fullStatsList:Array;
			
			// Currently we work only with dimension 2 graphs
			private const dim:int = 2;
			
			private const altColors:Array = new Array();

			private function onInitialize() : void
			{
				//------------------------------------------------------------------
				// Necessary hack to be able to inject data in view inside a window
				// http://mate.asfusion.com/forums/topic.php?id=274
				//------------------------------------------------------------------
				InjectorRegistry.register(this);
				
				for (var i:int=0; i<dim; i++)
					altColors.push(0xFFFFFF);
				for (i=0; i<dim; i++)
					altColors.push(0xCEDBEF);
			}
			
			public function numStatListener(event:ChooseStatisticsEvent):void {
				numSelected.text="Selected: " + statsList.length;
			}
			
			protected function stats_dragDropHandler(event:DragEvent):void
			{
				// Cancel the drop on the full list
				event.preventDefault();
			}
			
			private function updateBtn_clickHandler(event:MouseEvent):void
			{
				var chooseStatEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_STATS_EVENT);
				chooseStatEvent.statsList = (selectedStats.dataProvider as ArrayCollection).toArray();
				chooseStatEvent.maxNumObjects = parseInt(maxNumObjectsInput.text);
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatEvent);
			}
			
			private function leftBtn_clickHandler(event:MouseEvent):void
			{
				for each (var itemIdx:int in selectedStats.selectedIndices) {
					selectedStats.dataProvider.removeItemAt(itemIdx);
				}
			}
			
			private function rightBtn_clickHandler(event:MouseEvent):void
			{
				for each (var item:Object in availableStats.selectedItems) {
					// var temp:Object = ObjectUtil.copy(item);
					
					var copy:Object = new Object();
					for( var key:Object in item ) {
						// avoid copying the mx_interval_uid so it won't mess up the list's dataProvider
						if (  ( 'mx_internal_uid' != key ) ) {
							copy[ key ] = item[ key ];
						}
					}
					selectedStats.dataProvider.addItem(copy);
				}
			}
			
			private function randomGraphs_clickHandler(event:MouseEvent):void
			{
				var chooseStatsEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_RANDOM_STATS_EVENT);
				chooseStatsEvent.numStats = parseInt(numStatsInput.text) * dim;
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatsEvent);
			}
			
			
			protected function sequenceGraph_clickHandler(event:MouseEvent):void
			{
				var chooseStatsEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_SEQUENCE_STATS_EVENT);
				chooseStatsEvent.page = parseInt(pageNum.text);
				chooseStatsEvent.numStats = parseInt(numStatsInput.text);
				//chooseStatsEvent.maxNumObjects = parseInt(maxNumObjectsInput.text);
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatsEvent);
			}
			

			protected function previousNextPage(next:Boolean):void
			{
				if (next)
					pageNum.text = (parseInt(pageNum.text) + 1).toString();
				else
					pageNum.text = (parseInt(pageNum.text) - 1).toString();
				var chooseStatsEvent:ChooseStatisticsEvent = new ChooseStatisticsEvent(ChooseStatisticsEvent.CHOOSE_SEQUENCE_STATS_EVENT);
				chooseStatsEvent.page = parseInt(pageNum.text);
				chooseStatsEvent.numStats = parseInt(numStatsInput.text);
				//chooseStatsEvent.maxNumObjects = parseInt(maxNumObjectsInput.text);
				
				FlexGlobals.topLevelApplication.dispatchEvent(chooseStatsEvent);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<!-- necessary to bubble up events -->
		<mate:LocalEventMap dispatcher="{this}" />
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" />
		</s:layout>
		
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:Label text="Available Statistics" verticalAlign="middle" width="100%" height="24" fontWeight="bold"/>
			<!-- dragNdrop not yet available in spark lists of Flex 4 beta 2 -->
			<mx:List id="availableStats"
					 dataProvider="{fullStatsList}"
					 allowMultipleSelection="true"
					 labelField="name"
					 dragEnabled="true"
					 dropEnabled="true"
					 alternatingItemColors="[0xFFFFFF, 0xEEEEFF]"
					 width="100%" height="100%" dragDrop="stats_dragDropHandler(event)"/>
			<s:Label text="Number of stats available: {fullStatsList.length}"  textAlign="right"/>
		</s:Group>
		<s:Group >
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<mx:Image id="leftBtn" source="@Embed('images/arrowSmall.jpg')" rotation="90" click="leftBtn_clickHandler(event)" />
			<mx:Image id="rightBtn" source="@Embed('images/arrowSmall.jpg')" rotation="-90" click="rightBtn_clickHandler(event)" />
		</s:Group>
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:Label text="Statistics to display (by tuples of {dim})" verticalAlign="middle" width="100%" height="24" fontWeight="bold"/>
			<!-- dragNdrop not yet available in spark lists of Flex 4 beta 2 -->
			<mx:List id="selectedStats"
					 dataProvider="{statsList}"
					 allowMultipleSelection="true"
					 labelField="name"
					 dragEnabled="true"
					 dropEnabled="true"
					 dragMoveEnabled="true"
					 width="100%" height="100%"
					 alternatingItemColors="{altColors}">
				<mx:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<s:Label text="x:{data.item.name}" />
						</s:ItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
				</mx:List>
			<s:Label id="numSelected" text="Selected: {selectedStats.dataProvider.length}"  textAlign="right"/>
		</s:Group>
	</s:Group>
	<s:Group width="100%" height="24">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Label text="Number of graphs: " verticalAlign="middle" height="100%" fontWeight="normal" fontSize="12"/>
		<s:TextInput id="numStatsInput" width="24" text="6"/>
		<s:Label text="Max number of objects*: " verticalAlign="middle" height="100%" fontWeight="normal" fontSize="12"/>
		<s:TextInput id="maxNumObjectsInput" width="24" text="0" />
		<s:Button  id="randomGraphs" label="Random graphs" enabled="true" click="randomGraphs_clickHandler(event)"/>					
	</s:Group>
	<s:Group width="100%" height="24">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Button  id="previous" label="&lt;&lt;" enabled="true" click="previousNextPage(false)" width="35"/>			
		<s:Label text="Page number*: " verticalAlign="middle" height="100%" fontWeight="normal" fontSize="12"/>
		<s:TextInput id="pageNum" width="24" text="0" />
		<s:Button  id="sequenceGraph" label="Seq. graphs" enabled="true" click="sequenceGraph_clickHandler(event)"/>			
		<s:Button  id="next" label=">>" enabled="true" click="previousNextPage(true)" width="35"/>			
		<s:Label text="* put 0 for all" verticalAlign="middle" height="100%" fontStyle="italic" fontSize="12"/>
	</s:Group>
	<s:Group width="100%" height="24">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Label text="Note: last Stat will be ignored if number of items is not pair." fontStyle="italic" verticalAlign="middle" height="100%" />
		<mx:Spacer width="100%" />
		<s:Button label="Update" id="updateBtn" click="updateBtn_clickHandler(event)" width="60" />
		<s:Button label="Close" id="closeBtn" click="this.close()" width="55" />
	</s:Group>
</s:Window>
