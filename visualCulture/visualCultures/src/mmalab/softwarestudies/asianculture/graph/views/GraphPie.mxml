<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 creationComplete="group1_initializeHandler(event)" width="100%">
	<fx:Script>
		<![CDATA[
			import mmalab.softwarestudies.asianculture.data.models.Dataset;
			import mmalab.softwarestudies.asianculture.graph.events.SelectValueEvent;
			import mmalab.softwarestudies.asianculture.graph.utils.HistoPieUtil;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.charts.HitData;
			import mx.charts.series.items.PieSeriesItem;
			import mx.effects.easing.Quintic;
			import mx.events.FlexEvent;
			[Bindable]
			public var dataset:Dataset;
			[Bindable]
			public var selectedIdx:Array;
			[Bindable]
			public var statIdx:String;

			[Bindable]
			public var showDataTips:Boolean;
			
			[Bindable]
			public var numBins:int;

			private var histoPieUtil:HistoPieUtil = new HistoPieUtil();
			private var dataWatcher:ChangeWatcher;
			
			protected function pieseries1_clickHandler(event:MouseEvent):void
			{
				var selectValueEvent:SelectValueEvent = new SelectValueEvent(SelectValueEvent.VALUE_SELECTED);
				selectValueEvent.selectedValues = new Array();
				for each (var idx:int in pieseries1.selectedIndices) {
					for (var i:int=0; histoPieUtil.chartIDs && i<histoPieUtil.chartIDs[idx].length; i++) {
						selectValueEvent.selectedValues.push(histoPieUtil.chartIDs[idx][i]);
					}
				}
				dispatchEvent(selectValueEvent);
			}

			private function chart_dataTipFunction(item:HitData):String {
				var chartItem:PieSeriesItem = item.chartItem as PieSeriesItem;
				var tip:String = "<font color='#CECFD1' size='14'><b>" + statIdx + ":</b> " + chartItem.item.value + "(" + numberFormatter.format(chartItem.percentValue) + " %)<br/>"
					+chartItem.item.label + "</font>";
				return tip;
			}
		
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				if (dataset != null) {
					histoPieUtil.computeChartElements(dataset.values, this.statIdx, this.numBins, true);
					piechart1.dataProvider = histoPieUtil.chartValues;
				}
				this.dataWatcher = ChangeWatcher.watch(this, 'selectedIdx', dataChangeHandler);
				this.dataChangeHandler();
			}

			private function dataChangeHandler(event:Event=null):void{
				
				var selectedSectors:Array = new Array();
				for (var idx:int=0; idx<histoPieUtil.chartIDs.length && selectedIdx; idx++) {
					for (var i:int=0; histoPieUtil.chartIDs[idx] && i<histoPieUtil.chartIDs[idx].length; i++) {
						if (selectedIdx.indexOf(histoPieUtil.chartIDs[idx][i]) >= 0)  {
							selectedSectors.push(idx);
							break;
						}
					}
				}
				pieseries1.selectedIndices = selectedSectors;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:NumberFormatter id="numberFormatter" precision="2" 
							useThousandsSeparator="true" useNegativeSign="true" />
		<mx:SeriesInterpolate id="slideEffect" duration="2000" easingFunction="{Quintic.easeInOut}" />
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:fill><s:SolidColor color="0x333333" /></s:fill>
	</s:Rect>
	<mx:PieChart x="0" y="0" id="piechart1" width="100%" height="100%" selectionMode="multiple"  showDataTips="{showDataTips}"
				 dataTipFunction="chart_dataTipFunction"
				 mouseUp="pieseries1_clickHandler(event)">
		<mx:series>
			<mx:PieSeries id="pieseries1" selectable="true" displayName="values" field="value" labelField="label" nameField="label"
						   labelPosition="callout" >
				<mx:calloutStroke>
					<s:Stroke color="0x646467" weight="1" />
				</mx:calloutStroke>
			</mx:PieSeries>
		</mx:series>
	</mx:PieChart>
	<!--mx:Legend dataProvider="{piechart1}" symbolColor="#CCCCCC" borderVisible="false" dropShadowVisible="true"  color="#CCCCCC"/-->
</s:Group>
