#!/usr/bin/env python

import getopt, sys, os, shutil, string

# CA script
# author: Sunsern Cheamanunkul
# data: 4/22/2009

# require: wget, convert, ffmpeg, matlab


samplingRate = 10

default_ffmpeg_args = '-t 300 -sameq'
default_line_args = '--preset high'
#default_shot_args = '-f 0.4 -r 0.25 -g 3'
default_shot_args = ''
default_color_args = '-q 2'

sourceSuffix = 'source'
imagesSuffix = 'images'
lineSuffix = 'lines'
sampleSuffix = 'samples'
shotSuffix = 'shots'
colorSuffix = 'colors'
statsSuffix = 'stats'
keyframeSuffix = 'keyframes'

supportedMovieType = ['mpeg','mpg','avi','mov','m4v','mp4']
supportedImageType = ['jpg','jpeg','png','tif','tiff','bmp']

verbose = False

CAPATH = None


def usage():
    print 'USAGE: %s [OPTIONS] <project directory>'%('cascript')
    print 'OPTIONS' 
    print '\t--help\tShow this usage screen' 
    print '\t--url\tDownload and create project directory from URL'


# download specfic file to projectDir/source
def downloadFromUrl(projectDir,url):
    # get filename from url
    idx = url.rfind('/')
    if idx == -1:
        print 'Error: Invalid URL'
        sys.exit(1)
    filename = url[(idx+1):]

    # set target location
    target = os.path.join(projectDir, sourceSuffix)
    target = os.path.join(target,filename)

    # begin download by calling wget
    print 'Downloading %s...'%(filename)
    if not verbose:
        command = 'wget -q -O %s %s > /dev/null'%(target,url)
    else:
        command = 'wget -q -O %s %s'%(target,url)
        print command       
    error = os.system(command)
    if (error != 0):
        print 'Error: wget'
        sys.exit(1)


# look for a video file in the source directory under projectDir
def findVideoFile(projectDir):
    targetDir = os.path.join(projectDir,sourceSuffix)
    l = os.listdir(targetDir)
    for f in l:
        abs_f = os.path.join(targetDir,f)
        if ((os.path.isfile(abs_f)) and
            (f[-3:].lower() in supportedMovieType)):
            return abs_f
    return None



def extractFrames(projectDir,videoFile,args):
    global imagesSuffix, supportedMovieType
                
    # check if images directory already exists
    imagesDir = os.path.join(projectDir,imagesSuffix)
    if os.path.isdir(imagesDir):
        print 'WARNING: "images" directory is already existed. '+\
              'extractFrames is skipped. '+\
              'Please use --redump to force extracting frames' 
        return

    createDir(imagesDir)
    target = os.path.join(imagesDir,'%8d.jpg')
    if not verbose:
        command = 'ffmpeg -y -i %s -an %s '%(videoFile,args) +\
                  '-vcodec mjpeg %s > /dev/null'%(target)
    else:
        command = 'ffmpeg -y -i %s -an %s '%(videoFile,args) +\
                  '-vcodec mjpeg %s'%(target)
        print command
    error = os.system(command)
    if error != 0:
        print 'Error: ffmpeg'
        sys.exit(1)



def convertToJpg(projectDir):
    global imagesSuffix, supportedImageType

    # check if images directory already exists
    imagesDir = os.path.join(projectDir,imagesSuffix)
    if os.path.isdir(imagesDir):
        print 'WARNING: "images" directory is already existed. '+\
              'ConvertToJpg is skipped. '+\
              'Please use --redump to force converting frames' 
        return

    createDir(imagesDir)

    targetDir = os.path.join(projectDir,sourceSuffix)
    l = os.listdir(targetDir)
    for f in l:
        imageFile = os.path.join(targetDir,f)
        if ((os.path.isfile(imageFile)) and 
            (f.lower()[-3:] in supportedImageType)):
            targetFile = os.path.join(imagesDir,f[0:len(f)-3]+'jpg')
            command = 'convert %s %s'%(imageFile,targetFile)
            if verbose:
                print command
            error = os.system(command)
            if error != 0:
                print 'Error: convert'
                sys.exit(1)
        
def removeIllegalChar(str):
    str = str.replace(' ','_')
    str = str.replace('(','')
    str = str.replace(')','')
    return str

def createDir(dir):
    if (not os.path.isdir(dir)):
        try:
            os.makedirs(dir)
        except error:
            print 'Error: os.makedirs'
            sys.exit(1)


def combineResults(target, sourceFiles):
	fout = open(target,'w')
	f = []
	# open files
	for i in range(0,len(sourceFiles)):
		new_f = open(sourceFiles[i],'r')
		f.append(new_f)

	# for each line
	if (f != []):
		for line in f[0].readlines():
			fout.write(line.rstrip('\n'))
			for j in range(1,len(sourceFiles)):
				temp = f[j].readline().rstrip('\n')
	        	        temp = temp.split(',')
				temp = string.join(temp[1:],',')
				fout.write(',' + temp)
		 	fout.write('\n')
	
	# close files
	for i in range(0,len(sourceFiles)):
		f[i].close()

	fout.close()


#########################################


def processColor(projectDir, args):

    print 'Processing color...'

    scriptsDir = os.path.join(CAPATH,'scripts')
    sourceDir = os.path.join(projectDir,imagesSuffix)
    targetDir = os.path.join(projectDir,colorSuffix)
    
    # remove color directory
    if os.path.isdir(targetDir):
        shutil.rmtree(targetDir)
    
    # create new one
    createDir(targetDir)

    # run color
    if not verbose:
        command = '%s/color %s %s '%(scriptsDir,args,sourceDir) +\
                  '> /dev/null'
    else:
        command = '%s/color %s %s '%(scriptsDir,args,sourceDir)
        print command

    error = os.system(command)
    if error != 0:
        print 'Error: color'
        return False

    # move output
    l = os.listdir(sourceDir)
    for f in l:
        if (f[-3:] == 'txt'):
            src = os.path.join(sourceDir,f)
            dst = os.path.join(targetDir,f)
            shutil.move(src,dst)
        
    return True

def processLine(projectDir, args):

    print 'Processing line...'

    scriptsDir = os.path.join(CAPATH,'scripts')
    sourceDir = os.path.join(projectDir,imagesSuffix)
    targetDir = os.path.join(projectDir,lineSuffix)

    # remove existing directory
    if os.path.isdir(targetDir):
        shutil.rmtree(targetDir)
    
    # create new one
    createDir(targetDir)

    # run line
    if not verbose:
        command = '%s/line -d %s %s %s > /dev/null'\
            %(scriptsDir,targetDir,args,sourceDir)
    else:
        command = '%s/line -d %s %s %s'\
            %(scriptsDir,targetDir,args,sourceDir)
        print command

    error = os.system(command)
    if error != 0:
        print 'Error: line'
        return False

    return True


def processShot(projectDir, args):

    print 'Processing shot...'

    scriptsDir = os.path.join(CAPATH,'scripts') 
    sourceDir = os.path.join(projectDir,imagesSuffix)
    targetDir = os.path.join(projectDir,shotSuffix)

    # remove old directory
    if os.path.isdir(targetDir):
        shutil.rmtree(targetDir)

    # create new one
    createDir(targetDir)

    # run shot
    if not verbose:
        command = '%s/shot %s %s '%(scriptsDir,args,sourceDir) +\
                  '>/dev/null'
    else:
        command = '%s/shot %s %s'%(scriptsDir,args,sourceDir)
        print command

    error = os.system(command)
    if error != 0:
        print 'Error: shot'
        return False

    # move the output file
    shotFileSrc = os.path.join(sourceDir,'shot.output.txt')
    shotFileDst = os.path.join(targetDir,'shot.output.txt')
    shutil.move(shotFileSrc,shotFileDst)

    # create key frame dir
    keyframeDir = os.path.join(targetDir,keyframeSuffix)
    createDir(keyframeDir)
    f = open(shotFileDst,'r')
    for line in f.readlines():
        tokens = line.split('\t')
        if (len(tokens) == 3  and tokens[1] == '1'):
            img = os.path.join(sourceDir,tokens[0])
            shutil.copy2(img,keyframeDir)            
    f.close()
    return True



def processColorTexture(projectDir):

    print 'Processing colorTexture...'

    matlabPath = os.path.join(CAPATH,'matlab')
    matlabPath = os.path.join(matlabPath,'colorTexture')
    sourceDir = os.path.join(projectDir,imagesSuffix)
    sourceDir = os.path.abspath(sourceDir).rstrip('/') + '/'
    targetDir = os.path.join(projectDir,statsSuffix)

    # remove old directory
    if os.path.isdir(targetDir):
        shutil.rmtree(targetDir)

    # create new one
    createDir(targetDir)

    # run matlab
    if not verbose:
        command = 'matlab -nodisplay -nojvm '+\
            '-r "path(path,\'%s\'); '%(matlabPath) +\
            'batch(\'%s\'); '%(sourceDir)+\
            'exit;" > /dev/null'
    else:
        command = 'matlab -nodisplay -nojvm '+\
            '-r "path(path,\'%s\'); '%(matlabPath) +\
            'batch(\'%s\'); '%(sourceDir)+\
            'exit;"'
        print command

    error = os.system(command)
    if error != 0:
	print 'Error: colorTexture'
	return False
    
    # move stats.txt to
    statsFile = os.path.join(sourceDir,'stats.txt')
    shutil.move(statsFile,targetDir)
    
    return True
  


###########################################


def sampleFromImages(projectDir):
    sampleDir = os.path.join(projectDir,sampleSuffix)

    # remove old directory
    if os.path.isdir(sampleDir):
        shutil.rmtree(sampleDir)

    # create new one
    createDir(sampleDir)

    imagesDir = os.path.join(projectDir,imagesSuffix)
    l = os.listdir(imagesDir)
    l.sort()
    for f in l[::samplingRate]:
        shutil.copy2(os.path.join(imagesDir,f),sampleDir)
    

###########################################   


def main():

    global CAPATH
    global samplingRate
    global verbose

    url = None
    redump = None
    videoMode = False

    try:
        opts,args = getopt.getopt(sys.argv[1:], 'hv', 
                                  ['video','help','redump','url=','sampling='])
    except getopt.GetoptError:
        print 'Error: Illegal arguments'
        usage()
        sys.exit(2)

    for o, a in opts:
        if o in ('-h','--help'):
            usage()
            sys.exit()
        elif o in ('-v'):
            verbose = True
        elif o in ('--url'):
            url = a
        elif o in ('--video'):
            videoMode = True
        elif o in ('--redump'):
            redump = True
        elif o in ('--sampling'):
            samplingRate = a
        else:
            assert False, "unhandled option"

    if len(args) > 1:
        print 'Error: Too many arguments'
        usage()
        sys.exit(1)
    elif len(args) < 1:
        print 'Error: Too few arguments'
        usage()
        sys.exit(1)

    projectDir = args[0].rstrip('/')

    try:
        CAPATH = os.environ['CAPATH']
    except:
        print 'ERROR: CAPATH enviroment variable not found'
        sys.exit(1)
    
    # if url is specified, create project dir 
    # and download the file
    if url != None:
        createDir(projectDir)
        downloadFromUrl(projectDir,url)
        
    # if projectDir does not exist, exit
    if not os.path.isdir(projectDir):
        print '%s not found'%projectDir
        sys.exit(1)

    # locate a supported video file in projectDir
    videoFile = findVideoFile(projectDir)
    
    # if redump, remove images directory
    if redump != None:
        imagesDir = os.path.join(projectDir,imagesSuffix)
        if os.path.isdir(imagesDir): 
            shutil.rmtree(imagesDir)

    # import configuration file
    try:
        sys.path.append(projectDir)
        import config
        for var in dir(config):
            if not var.startswith('_'):
                globals()[var] = eval('config.' + var)
    except ImportError:
	print 'WARNING: config.py not found'	
    except:
        print 'Error: importing config.py'

    # video case
    if (videoFile != None) or videoMode:
        if (videoFile != None):
            extractFrames(projectDir,videoFile,default_ffmpeg_args)
        else:
            convertToJpg(projectDir)
        shotFlag = processShot(projectDir,default_shot_args)
        lineFlag = processLine(projectDir,default_line_args)
        colorFlag = processColor(projectDir,default_color_args)
        matlabFlag = processColorTexture(projectDir)
	
	# check for finished results 	
	files = []
        if shotFlag:
	     	files.append(projectDir+'/shots/shot.output.txt')
	if lineFlag:
	     	files.append(projectDir+'/lines/result.txt')
	if matlabFlag:
	     	files.append(projectDir+'/stats/stats.txt')

        combineResults(projectDir+'/result.txt',files)

    # images case
    else:
        convertToJpg(projectDir)
        sampleFromImages(projectDir)
        lineFlag = processLine(projectDir,default_line_args)
        matlabFlag = processColorTexture(projectDir)
        colorFlag = processColor(projectDir,default_color_args)

	# check for finished results 	
	files = []
	if lineFlag:
	     	files.append(projectDir+'/lines/result.txt')
	if matlabFlag:
	     	files.append(projectDir+'/stats/stats.txt')

        combineResults(projectDir+'/result.txt',files)


if __name__ == "__main__":
    main()
