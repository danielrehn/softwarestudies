//  IMAGEPLOT
//
//  Lev Manovich and Jeremy Douglass 2009
//
//  ImageJ macro that plots points, lines, and image series to x,y points using a tab-delimited data file and a directory of images.
//  The macro automatically handles multple styles of of tab-separated-value data files:
//
//  TWO COLUMN DATA
//     Column 1 = X (1950, 1977, 2008)
//     Column 2 = Y (192, 128, 256)
//     Axes are independantly ranged and scaled to the plot space defined by canvas - borders. Values may be floating point.
//  FOUR COLUMN DATA
//     Column 3 = Series IDs (1, 2, 3...)
//      Column 4 = Series labels (Mondrian, Picasso, Rothko...)
//     Series are used to:
//         a) vertically offset data series graphs using y_fixed_range;
//         b) set diff. color for each data series
//         c) draw labels
//  FIVE COLUMN DATA
//     Column 5 = image file names to render at x/y.

// ---------------------
// FLAGS: either 0 or 1

var              GUI_mode =    1;     // (1) GUI menus, (0) use default variables

var           images_flag =    1;     // draw images on top of dots (1) or no images (0)
var    images_frames_flag =    1;     // draw image frames
var           points_flag =    1;     // draw dots; if set to 0, and image_flag set to 1, only images are drawn
var           lines_flag  =    1;     // draw lines
var     images_blend_flag =    0;     // (1) Blend mode copying of images
var          x_fixed_flag =    0;     // fixed range for X
var          y_fixed_flag =    0;     // fixed range for Y. Note: y_fixed_flag = 1 automatically if more than one data series
var    points_values_flag =    1;     // draw values next to dot
var    points_series_flag =    1;     // draw value in column 4 (for example, artist name, category, etc.) next to dot
var           axis_x_flag =    1;     // draw axis lines x
var           axis_y_flag =    1;     // draw axis lines y
var         x_labels_flag =    1;     // draw labels for X axis
var         y_labels_flag =    1;     // draw labels for Y axis
var           legend_flag =    1;     // draw legend for multiple series

var   render_mode = "Progressinve";
var   render_mode_list = newArray(
   "Fast"
  ,"Progressive"
  ,"Save"
  );
var   render_order = "Images+Labels / Lines / Axes";
var   render_order_list = newArray(
   "Axes / Images+Labels / Lines"
  ,"Axes / Lines / Images+Labels"
  ,"Axes / Images / Labels / Lines"
  ,"Images+Labels / Lines / Axes"
  ,"Lines / Images+Labels / Axes"
  ,"Labels / Lines / Images / Axes"
  ,"Lines / Images / Labels / Axes"
  ,"Images / Labels / Lines / Axes"
  ,"Lines / Images / Labels / Axes"
  ,"Labels / Images / Lines / Axes"
  ,"Lines / Labels / Images / Axes"
   );

var   points_style_choice = "Circle Filled";  // draw based on Series, based on Value, or in a fixed Fill color
var     points_style_list = newArray(
   "Circle"
  ,"Circle Filled"
  ,"Rectangle"
  ,"Rectangle Filled"
  ,"None"
  );

var   points_color_choice = "Series";
var   labels_color_choice = "Series";
var   lines_color_choice  = "Series";
var   frames_color_choice = "Series";

var            color_choice_list = newArray(
   "Fill"
  ,"Series"
  ,"X Values"
  ,"Y Values"
  );

var     points_color = newArray(255,255,255);
var     labels_color = newArray(255,255,255);
var      lines_color = newArray(255,255,255);
var     frames_color = newArray(128,128,128);
var    fill_bg_color = newArray(0,0,0);



// ---------------------
// VARIABLES

var data_file = "Open...";
var data_file_list = newArray(
   "Open..."
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej.txt"
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej-3.txt"
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej-20.txt"
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej-20b.txt"
  );

var image_dir = "Same as data"
var image_dir_list = newArray(
   "Same as data"
  ,"Open..."
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/"
  ,"None"
  );

// variables: graph

var         canvas_width =   800;     // total output width
var        canvas_height =   800;     // total output height
var               border =   100;     // space around the graph -- subtracted from canvas to leave draw space
var   image_resize_width =    64;     // resize width for thumbnails -- 0 or blank is original size
var           point_size =    10;     // size of points to draw
var           line_size =      2;     // width of lines to draw
var           label_size =    12;     // font size for labels next to dots in the graph
var     labels_precision =     1;     // decimal points to round printed labels
var    canvas_colorspace = "RGB";     // RGB or 8-bit

var              x_scale =     4;     // factor to scale x image size - use fractions (i.e, 0.1) if x_max - x_min is too large
var              y_scale =     4;     // factor to scale y image size - use fractions (i.e, 0.1) if x_max - x_min is too large
var         x_axis_start =     0;     // starting x axis value
var        x_fixed_range =     0;     // e.g. 100 (1900-2000) instead of (xmax - xmin)
var         y_axis_start =     0;     // starting y axis value
var        y_fixed_range =   255;     // e.g. 255 (0-255) instead of (ymax - ymin); set to 0 to use data range

var               origin = newArray(0,0,0); // generic coordinate (x,y,series) for line drawing
var               ln_end = newArray(10,10,0); // generic coordinate (x,y,series) for line drawing

// variables: color pallete (8 colors)

var colors = newArray(130, 15, 0, 255, 74, 18, 254, 246, 226, 148, 179, 197, 116, 198, 241, 88, 107, 122, 62, 79, 79, 171, 197, 7); //  from beta.dailycolorscheme.com - 8 colors

// variables: legend, axis, ticks, labels

var            ds_labels = newArray(100); // unique data series labels; change if data contains >100 series
var          legend_size =    12;     // font size for the legend
var      axis_label_size =    12;     // font size for axis labels
var           axis_color = newArray(192,128,64); // color for axis and labels

var          tick_length =     5;     // axis tick lengths
var           line_width =     1;     // width of X,Y axis lines and horizontal separation lines
var         x_label_step =    10;     // step for drawing x labels: draw label and tick every x_label_step units
var         y_label_step =     2;     // step for drawing y labels: draw label and tick every y_label_step units 

// set default value -  if the data file only has 2 columns (X, Y), assume it is one data series;

var dmax = 1;
var   ds = 1;


// ---------------------
// FUNCTIONS

function float_print(float, precision){
  print("FLOAT: "+float);
  float_items = split(float, ".");
  print("FLOAT[0]: "+float_items[0]);
  print("FLOAT[1]: "+float_items[1]);
  if (precision > lengthOf(float_items[1]))
    precision =  lengthOf(float_items[1]);
  if (precision > 0)
    print("RETURN 0+1: "+float_items[0] + substring(float_items[1], 0, precision));
    return (float_items[0] + "." + substring(float_items[1], 0, precision));
  else
    print("RETURN 0: "+float_items[0]);
    return (float_items[0]);
}

function set_color(x, y, ds, rgb, color_choice) { 
  // print("set_color: x:"+x+"  y:"+y+"  ds:"+ds+"  rgb:"+rgb[0]+" "+rgb[1]+" "+rgb[2]+"  color_choice:"+color_choice);
  if (color_choice == "Fill") {
	    setColor(rgb[0], rgb[1], rgb[2]);
  } else if (color_choice == "Series") {
      if ((ds*3) <= colors.length) {
      setColor(colors[3 * (ds - 1)], colors[3 * (ds - 1) + 1], colors[3 * (ds - 1) + 2]);
      // set up colors using the number of data series
      // only works with 8 data series since colors array contains 8 sets of R,G,B values
      }
  } else if (color_choice == "Black") {
	    setColor(0,0,0);
  } else if (color_choice == "White") {
	    setColor(0,0,0);
  }
}

function draw_image(x, y, ds) {

  if(render_mode == "Progressive") {
	  setBatchMode(true);
	}

  x = parseInt(x);
  y = parseInt(y);

  if (images_flag == 1) {
    showProgress(i, lines.length);
    // show progress in imageJ menu bar
    image_path = dir + items[4];
    open(image_path);

    if (image_resize_width > 0) {
        run("Size...", "width=" + image_resize_width + " constrain interpolate");
    }

    image_width = getWidth;
    image_height = getHeight;
    run("Copy");
    // copy to memory
    close();
    // close the image file
    selectImage(id_plot);
    // select graph image
    makeRectangle(x, y, image_width, image_height);
    // default - drawing at the right coordinate
    run("Paste");

    set_color (x,y,ds,frames_color,frames_color_choice);
	  drawRect(x, y, image_width, image_height);

  }

  if(render_mode == "Progressive") {
	  setBatchMode(false);
	}

}


function draw_dot(x, y, points_style_choice) {
  x = parseFloat(x);
  y = parseFloat(y);

  if (points_style_choice == "Circle")
    drawOval(x - (point_size / 2), y - (point_size / 2), point_size, point_size);
  else if (points_style_choice == "Circle Filled")
    fillOval(x - (point_size / 2), y - (point_size / 2), point_size, point_size);
  else if (points_style_choice == "Rectangle")
    drawRect(x - (point_size / 2), y - (point_size / 2), point_size, point_size);
  else if (points_style_choice == "Rectangle Filled")
    fillRect(x - (point_size / 2), y - (point_size / 2), point_size, point_size);
  else if (points_style_choice == "None")
    print("points_style_choice: None");
  else
    print("Warning: points_style_choice failed to match style");
}


function plot_xy(x, y, ds) {
  // plot conversion -- takes raw data xy and series number d, returns absolute ImageJ pixel coordinates
  // For a series d, accepts the raw x/y and returns the plotting coordinates
  x = parseFloat(x);
  y = parseFloat(y);

  //   canvas   1000 x 1000
  // w borders   800 x  800 (100)
  //   data    x: 300               y: 5            d: 1
  //   range   x: 200 (200-400)     y: 20 (0-20)    d: 3 (1-3)

  plot_width  = (canvas_width  - (border*2));         //  1000 - 100*2      = 800
  plot_height = (canvas_height - (border*2)) / dmax;  // (1000 - 100*2) / 2 = 400

  if (x_fixed_flag == 1) { x_values_range = x_fixed_range; } else {  x_values_range = xmax - xmin; }      // 400 - 200 = 200
  if (y_fixed_flag == 1) { y_values_range = y_fixed_range; } else {  y_values_range = ymax - ymin; } //  20 -   0 =  20

  x_scale = plot_width / x_values_range;  // 800 / 200 =  4
  y_scale = plot_height / y_values_range; // 400 / 20  = 20

  // scale data to plot area
  x = ((x-xmin) * x_scale);               // (300-200) *  4 = 400
  y = ((y-ymin) * y_scale);               // ( 5 -  0) * 20 = 100

  // border offset
  x = x + border;
  y = y + border;

  // series offset
  y = y + ((ds-1)*plot_height);

  // switch y from cartesian graphing coordinate (lower left) to ImageJ coordinates (upper left)
  y = canvas_height - y;

  // can't return an array, so return a delimited string, then split
  return toString(x+" "+y+" "+ds);
}


function draw_axis() {
  // draw horizontal axis and vertical axis

  setFont("SansSerif", axis_label_size, "antialiased");
  setJustification("left");
  setColor(axis_color[0], axis_color[1], axis_color[2]);

  if (axis_y_flag == 1) {
    for (i=0; i < dmax; i++) {
        drawLine(border, border+(plot_height*(i+1)), border, y_label_offset + border+(plot_height*(i)));
    }
  }
  if (axis_x_flag == 1 ) {
    for (i=0; i < dmax; i++) {   // skip drawing first separation line
        drawLine(border, border+(plot_height*(i+1)), border + plot_width, border+(plot_height*(i+1)));
        // horizontal separation line between each data series
    }
  }

  // draw y labels  
  if (y_labels_flag == 1) {
    if (y_fixed_flag == 0) {
      label_value = ymin;
      label_last = ymax;
    } else {
      label_value = y_axis_start;
      label_last = y_axis_start + y_values_range;
    }
    print("label_value:"+label_value+"  label_last:"+label_last); // debug
  
    for (dsi=1; dsi <= dmax; dsi++)  {
      for (i=ymin; i < ymax; i=i+y_label_step)  {
        ln_origin = split(plot_xy(xmin, i, dsi), ""); // plot_xy returns a string of delimited values
        x = ln_origin[0];
        y = ln_origin[1];
        label_value = i;
        drawLine( x, y, x - tick_length, y); // draw axis tick line    
        drawString(float_print(i,labels_precision), x-x_label_offset, y); // draw axis label
      }
      if (label_value != label_last) { // end cap line
        ln_origin = split(plot_xy(xmin, ymax, dsi), ""); // plot_xy returns a string of delimited values
        x = ln_origin[0];
        y = ln_origin[1];
        drawLine( x + tick_length, y + y_label_offset, x - tick_length, y + y_label_offset); // draw axis tick line    
        //if (label_value > label_last-(0.9*y_label_step)) // smart xmax label
          drawString(float_print(ymax,labels_precision), x-x_label_offset, y+ y_label_offset);
      }
    }
  }

  // draw x labels 
  if (x_labels_flag == 1) {
  
    if (x_fixed_flag == 0) {
      label_value = xmin;
      label_last = xmax;
    } else {
      label_value = x_axis_start;
      label_last = x_axis_start + x_values_range;
    }
  
    for (i=xmin; i < xmax; i=i+x_label_step)  {
      ln_origin = split(plot_xy(i, ymin, 1), ""); // plot_xy returns a string of delimited values
      x = ln_origin[0];
      y = ln_origin[1];
      label_value = i;
      drawLine( x, y, x, y - tick_length); // draw axis tick line    
      drawString(float_print(i,labels_precision), x, y+y_label_offset); // draw axis label
    }
    if (label_value != label_last) { // end cap line
      ln_origin = split(plot_xy(xmax, ymin, 1), ""); // plot_xy returns a string of delimited values
      x = ln_origin[0];
      y = ln_origin[1];
      drawLine( x, y + tick_length, x, y - tick_length); // draw axis tick line  
      //if (label_value > label_last-(0.9*x_label_step)) // smart xmax label
        drawString(float_print(xmax,labels_precision), x - x_label_offset, y+y_label_offset);
    }
  }

  // DRAW LEGEND
  if (legend_flag == 1) {
    if (columns > 3) {
      setFont("SansSerif", legend_size, "antialiased");
      setJustification("left");
      x = point_size + legend_size;
      y_start = (point_size + legend_size)*dmax;
      if (ds <= 8) { // colorspace currently hardcoded to 8 or less
        for (i=0; i < dmax; i++)  {
          y = y_start - i*(point_size + legend_size);
          setColor(colors[3*i], colors[3*i+1], colors[3*i+2] ); //  set up colors using the number of data series
          draw_dot(x, y, points_style_choice);
          drawString(ds_labels[i], x, y); // draw legends
        }
      }
    }
  }
}

function draw_lines() {
	if (lines_flag == 1) {
    for (i = 1; i < lines.length; i++) {
  
      items0 = split(lines[i-1], ",\t");
      x0 = parseFloat(items0[0]);
      y0 = parseFloat(items0[1]);
      if (columns > 2)
  	    ds0 = parseFloat(items0[2]);
  
      items = split(lines[i], ",\t");
      x = parseFloat(items[0]);
      y = parseFloat(items[1]);
      if (columns > 2)
  	    ds = parseFloat(items[2]);
  
      // convert coordinates from data to plot
      ln_origin = split(plot_xy(x0, y0, ds0), "");
      x0 = ln_origin[0];
      y0 = ln_origin[1];
  
      ln_origin = split(plot_xy(x, y, ds), "");
      x = ln_origin[0];
      y = ln_origin[1];
  
      // draw line
      if (ds0 == ds) { // don't connect lines across series
      // note -- this assumes the data files was sorted by series!
        set_color(x,y,ds,lines_color,lines_color_choice);
        drawLine(x0,y0,x,y);
      }  
    }
  }	
}

function draw_graph() {

  for (i = 0; i < lines.length; i++) {

    items = split(lines[i], ",\t");
    x = parseFloat(items[0]);
    y = parseFloat(items[1]);
    if (columns > 2)
	    ds = parseFloat(items[2]);
    if (columns > 3)
      label_name = items[3];

    // convert coordinates from data to plot
    ln_origin = split(plot_xy(x, y, ds), "");
    x = ln_origin[0];
    y = ln_origin[1];

    // draw point

    if (points_flag == 1) {
        set_color(x,y,ds,points_color,points_color_choice);
        draw_dot(x,y, points_style_choice);
    }

    // draw series label

    if (points_series_flag == 1) {
	      setFont("SansSerif", label_size, "antialiased");
        setJustification("left");
        set_color(x,y,ds,labels_color,labels_color_choice);
        drawString(label_name, x, y-label_size);
    }

    // draw value label

    if (points_values_flag == 1) {
	      setFont("SansSerif", label_size, "antialiased");
        setJustification("left");
        set_color(x,y,ds,labels_color,labels_color_choice);
        drawString(float_print(items[0],labels_precision) + ", " + float_print(items[1],labels_precision), x, y);
    }

    // draw image
    
    draw_image(x,y, ds);
  }
}

// ---------------------
// SETUP

call("java.lang.System.gc"); // call Java garbage collector to free memory

// Load dialog

if (GUI_mode == 1) {

  Dialog.create      ("IMAGEPLOT");

  Dialog.addChoice   ("Data", data_file_list, data_file);
  Dialog.addChoice   ("Images", image_dir_list, image_dir);
  Dialog.addChoice   ("Render order", render_order_list, render_order);
  Dialog.addChoice   ("Render mode", render_mode_list, render_mode);
  Dialog.addCheckbox ("...configure", GUI_mode);

  Dialog.show();

  data_file = Dialog.getChoice();
  image_dir = Dialog.getChoice();
  render_order = Dialog.getChoice();
  render_mode = Dialog.getChoice();
  GUI_mode = Dialog.getCheckbox();

  if (data_file == "Open...") {
    path = File.openDialog("IMAGEPLOT \n LOAD DATA: \n Select tab-delimited text file"); // read in data file
  } else {
    path = data_file;
  }
  print("   path: ", path);
    text = File.openAsString(path);
  lines = split(text, "\n");
  print("   rows: " + lines.length);
  items = split(lines[0], ",\t");
  columns = items.length; // get the number of columns
  print("columns: "+columns);

  if (image_dir == "Same as data") {
    dir = File.getParent(path);
    dir = dir + "/";
  } else if (image_dir == "Open...")
    dir = getDirectory("IMAGEPLOT \n LOAD IMAGES: \n Choose directory containing images to plot");
  else if (image_dir == "None")
    images_flag = 0;
  else dir = image_dir;



}

// Configure dialogs

if (GUI_mode == 1) {

  Dialog.create ("IMAGEPLOT CONFIG");

  Dialog.addMessage ("--- Images ---");

    Dialog.addChoice   ("Color", newArray("RGB", "8-bit"), canvas_colorspace);
    Dialog.addCheckbox ("Blend", images_blend_flag);
    Dialog.addNumber   ("Thumbnail width", image_resize_width, 0, 5, "px");
    Dialog.addCheckbox ("Frames", images_frames_flag);
    Dialog.addChoice   ("Frame color", color_choice_list, frames_color_choice);
    Dialog.addNumber   ("R", frames_color[0], 0, 5, "");
    Dialog.addNumber   ("G", frames_color[1], 0, 5, "");
    Dialog.addNumber   ("B", frames_color[2], 0, 5, "");

  Dialog.addMessage ("--- Canvas ---");

    Dialog.addNumber   ("Canvas Width", canvas_width, 0, 5, "px");
    Dialog.addNumber   ("Canvas Height", canvas_height, 0, 5, "px");
    Dialog.addNumber   ("Border size", border, 0, 5, "px");
    Dialog.addMessage  ("Background color");
    Dialog.addNumber   ("R", fill_bg_color[0], 0, 5, "");
    Dialog.addNumber   ("G", fill_bg_color[1], 0, 5, "");
    Dialog.addNumber   ("B", fill_bg_color[2], 0, 5, "");

  Dialog.addMessage ("--- Plot ---");

    Dialog.addCheckbox ("Points", points_flag);
    Dialog.addNumber   ("Point size", point_size, 0, 5, "px");
    Dialog.addChoice   ("Point style", points_style_list, points_style_choice);
    Dialog.addChoice   ("Point color", color_choice_list, points_color_choice);
    Dialog.addNumber   ("R", points_color[0], 0, 5, "");
    Dialog.addNumber   ("G", points_color[1], 0, 5, "");
    Dialog.addNumber   ("B", points_color[2], 0, 5, "");

    Dialog.addCheckbox ("Lines", lines_flag);
    Dialog.addNumber   ("Line size", line_size, 0, 5, "px");
    Dialog.addChoice   ("Line color", color_choice_list,lines_color_choice);
    Dialog.addNumber   ("R", lines_color[0], 0, 5, "");
    Dialog.addNumber   ("G", lines_color[1], 0, 5, "");
    Dialog.addNumber   ("B", lines_color[2], 0, 5, "");

    Dialog.addCheckbox ("Values labels", points_values_flag);
    Dialog.addCheckbox ("Series labels", points_series_flag);
    Dialog.addChoice   ("Series label color", color_choice_list, labels_color_choice);
    Dialog.addNumber   ("R", labels_color[0], 0, 5, "");
    Dialog.addNumber   ("G", labels_color[1], 0, 5, "");
    Dialog.addNumber   ("B", labels_color[2], 0, 5, "");


  Dialog.show();

    canvas_colorspace  = Dialog.getChoice(); // RGB color image
    images_blend_flag  = Dialog.getCheckbox();
    image_resize_width = Dialog.getNumber();
    images_frames_flag = Dialog.getCheckbox();
    frames_color_choice = Dialog.getChoice();
    frames_color[0] = Dialog.getNumber();
    frames_color[1] = Dialog.getNumber();
    frames_color[2] = Dialog.getNumber();

    canvas_width       = Dialog.getNumber();
    canvas_height      = Dialog.getNumber();
    border             = Dialog.getNumber();
    fill_bg_color[0]   = Dialog.getNumber();
    fill_bg_color[1]   = Dialog.getNumber();
    fill_bg_color[2]   = Dialog.getNumber();

    points_flag        = Dialog.getCheckbox(); // Plot points
    point_size          = Dialog.getNumber();
    points_style_choice = Dialog.getChoice();
    points_color_choice = Dialog.getChoice();
    points_color[0]   = Dialog.getNumber();
    points_color[1]   = Dialog.getNumber();
    points_color[2]   = Dialog.getNumber();

    lines_flag        = Dialog.getCheckbox(); // Plot points
    line_size          = Dialog.getNumber();
    lines_color_choice = Dialog.getChoice();
    lines_color[0]   = Dialog.getNumber();
    lines_color[1]   = Dialog.getNumber();
    lines_color[2]   = Dialog.getNumber();

    points_values_flag = Dialog.getCheckbox();
    points_series_flag = Dialog.getCheckbox();
    labels_color_choice = Dialog.getChoice();
    labels_color[0]   = Dialog.getNumber();
    labels_color[1]   = Dialog.getNumber();
    labels_color[2]   = Dialog.getNumber();


  Dialog.create ("IMAGEPLOT CONFIG AXES");

  Dialog.addMessage ("--- Axes ---");

    Dialog.addCheckbox ("X axis lines", axis_x_flag);
    Dialog.addCheckbox ("Y axis lines", axis_y_flag);
    Dialog.addNumber   ("Axis tick length", tick_length, 0, 5, "px");
    Dialog.addNumber   ("Line width (axes, separators)", line_width, 0, 5, "px");

  Dialog.addMessage ("--- Axis Labels ---");

    Dialog.addCheckbox ("X axis labels", x_labels_flag);
    Dialog.addCheckbox ("Y axis labels", y_labels_flag);
    Dialog.addNumber   ("Axis label font size", axis_label_size, 0, 5, "pt");
    Dialog.addMessage  ("Axis color");
    Dialog.addNumber   ("R", axis_color[0], 0, 5, "");
    Dialog.addNumber   ("G", axis_color[1], 0, 5, "");
    Dialog.addNumber   ("B", axis_color[2], 0, 5, "");
    Dialog.addNumber   ("X label step", x_label_step, 0, 5, "");
    Dialog.addNumber   ("Y label step", y_label_step, 0, 5, "");

  Dialog.addMessage ("--- Legend ---");

    Dialog.addCheckbox ("Legend for series", legend_flag);
    Dialog.addNumber   ("Legend font size", legend_size, 0, 5, "pt");

  Dialog.addMessage ("--- Axis Ranges ---");

    Dialog.addCheckbox ("X range fixed?", x_fixed_flag);
    Dialog.addCheckbox ("Y range fixed? (Auto-Y for multiseries)", y_fixed_flag);
    Dialog.addNumber   ("starting x axis value", x_axis_start, 0, 5, "unit");
    Dialog.addNumber   ("X fixed range", x_fixed_range, 0, 5, "units (0 = xmax-xmin)");
    Dialog.addNumber   ("starting y axis value", y_axis_start, 0, 5, "unit");
    Dialog.addNumber   ("Y fixed range", y_fixed_range, 0, 5, "units (0 = ymax-ymin)");
    Dialog.addNumber   ("X scale factor", x_scale, 0, 5, "px/unit");
    Dialog.addNumber   ("Y scale factor", y_scale, 0, 5, "px/unit");
    Dialog.addNumber   ("Label font size", label_size, 0, 5, "pt");
    Dialog.addNumber   ("Label precision", labels_precision, 0, 5, "decimals");

  Dialog.show();

    axis_x_flag        = Dialog.getCheckbox();
    axis_y_flag        = Dialog.getCheckbox();
    tick_length        = Dialog.getNumber();
    line_width         = Dialog.getNumber();
                       
    x_labels_flag      = Dialog.getCheckbox();
    y_labels_flag      = Dialog.getCheckbox();
    axis_label_size    = Dialog.getNumber();
    axis_color[0]      = Dialog.getNumber();
    axis_color[1]      = Dialog.getNumber();
    axis_color[2]      = Dialog.getNumber();
    x_label_step       = Dialog.getNumber();
    y_label_step       = Dialog.getNumber();
                       
    legend_flag        = Dialog.getCheckbox();
    legend_size        = Dialog.getNumber();
                       
    x_fixed_flag       = Dialog.getCheckbox();
    y_fixed_flag       = Dialog.getCheckbox();
    x_axis_start       = Dialog.getNumber();
    x_fixed_range      = Dialog.getNumber();
    y_axis_start       = Dialog.getNumber();
    y_fixed_range      = Dialog.getNumber();
    x_scale            = Dialog.getNumber();
    y_scale            = Dialog.getNumber();
    label_size         = Dialog.getNumber();
    labels_precision   = Dialog.getNumber();

}


// ---------------------
// CALCULATE

// Series

// calculate the number of data series and read in data series labels
// dmax is set to 1 by default

if (columns > 3) { // if data series numbers and labels are present - i.e., data has at least 4 columns
  labels_max = 0;
  ds = 0;
  for (i=0; i<lines.length; i++) {
    items=split(lines[i], ",\t"); // read in data row
    ds = parseFloat(items[2]);      // read data series number (column 3)
    if (ds > dmax)                // if a new data series number is encountered
      dmax = ds;                  // set dmax to this number
    if (ds > labels_max) {        // if a new data series number is encountered
      labels_max = ds;
      ds_labels[labels_max-1]=items[3]; // read the label corresponding to this number (column 4)
    }
  }
  print("number of data series as specified in column 3 = " + dmax);
  print("ds_labels: "+ ds_labels[0]);// debug
}

// Canvas, draw, and plot sizes

// max and min values

items=split(lines[0], ",\t");
xmin=items[0];
xmax=items[0];
ymin=items[1];
ymax=items[1];

for (i=0; i<lines.length; i++) {
  items=split(lines[i], ",\t");
  x = parseFloat(items[0]);
  y = parseFloat(items[1]);
  if (x>xmax) xmax = x;
  if (x<xmin) xmin = x;
  if (y>ymax) ymax = y;
  if (y<ymin) ymin = y;
}

print("xmax           = "+xmax);
print("xmin           = "+xmin);
print("ymax           = "+ymax);
print("ymin           = "+ymin);

// range

x_values_range = xmax - xmin;
y_values_range = ymax - ymin;
if (x_fixed_flag == 1) { x_values_range = x_fixed_range; }
if (y_fixed_flag == 1) { y_values_range = y_fixed_range; }

print("x_values_range = " +x_values_range);
print("y_values_range = " +y_values_range);

// define the drawing and plotting area

print("border         = "+border);
print("canvas width   = "+canvas_width);
print("canvas height  = "+canvas_height);

draw_width  = (canvas_width  - (border*2));
draw_height = (canvas_height - (border*2));

print("  draw width   = "+draw_width);
print("  draw height  = "+draw_height);

ln_origin = split(plot_xy(0, 0, 1), ""); // plot_xy returns a string of delimited values
x = ln_origin[0];
y = ln_origin[1];

print("     x origin  = "+ln_origin[0]);
print("     y origin  = "+ln_origin[1]);

plot_width  = draw_width;
plot_height = draw_height / dmax;

print("  plot width   = "+draw_width);
print("  plot height  = "+draw_height);

x_scale = plot_width / x_values_range;
y_scale = plot_height / y_values_range;

print("plot width     = "+plot_width);
print("plot height    = "+plot_height);
print("   x scale     = "+x_scale);
print("   y scale     = "+y_scale);


// -----------------------------------------
// MAKE CANVAS

  if(render_mode == "Progressive") {
    setBatchMode(false); // set to display the graph as it is being made
  } else {
	  setBatchMode(true);
  }

  print("making image "+ canvas_width + " x " + canvas_height);
  newImage("IMAGEPLOT", ""+canvas_colorspace+" black", canvas_width, canvas_height, 1);
  setColor(fill_bg_color[0], fill_bg_color[1], fill_bg_color[2]);
  fill();
  id_plot=getImageID;


// -----------------------------------------
// SET DRAWING PARAMETERS

  setLineWidth(line_width);
  if (images_blend_flag == 1)
    setPasteMode("Blend"); // blend overlapping images
  else
    setPasteMode("Copy");
  x_label_offset = 2*axis_label_size;
  y_label_offset = 2*axis_label_size;

// -----------------------------------------
// GRAPH

render_items = split(render_order, " / ");
for (i = 0; i < render_items.length; i++) {

  if (render_items[i] == "Axes") {
    print("......"+render_items[i]);
    draw_axis();

  } else if (render_items[i] == "Lines") {
    print("......"+render_items[i]);
    draw_lines();

  } else if (render_items[i] == "Images+Labels") {
    print("......"+render_items[i]);
    draw_graph();

  } else if (render_items[i] == "Images") {
    print("......"+render_items[i]);
    temp_points_flag = points_flag;
    temp_points_values_flag = points_values_flag;
    temp_points_series_flag = points_series_flag;
    points_flag = 0;
    points_values_flag = 0;
    points_series_flag = 0;

    draw_graph();

    points_flag = temp_points_flag;
    points_values_flag = temp_points_values_flag;
    points_series_flag = temp_points_series_flag;

	} else if (render_items[i] == "Labels") {
    print("......"+render_items[i]);
    temp_images_flag = images_flag;
    temp_images_frames_flag = images_frames_flag;
    images_flag = 0;
		images_frames_flag = 0;

    draw_graph();

    images_flag = temp_images_flag;
		images_frames_flag = temp_images_frames_flag;

	}    
}

print("Finished drawing");

if (render_mode == "Save") {
  selectImage(id_plot);
  saveAs("JPG");
  close();
}

setBatchMode(false); // make the plot image visible
run("Select None");
