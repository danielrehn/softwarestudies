// IMAGEPLOT
//
//   ImageJ macro that plots image series to x,y points using a tab-delimited data file and a directory of images.
//  The macro automatically handles multple styles of of tab-separated-value data files:
//
//  TWO COLUMN DATA
//     Column 1 = X (1950, 1977, 2008)
//     Column 2 = Y (192, 128, 256)
//     Axes are independantly ranged and scaled to the plot space defined by canvas - borders. Values may be floating point.
//  FOUR COLUMN DATA
//     Column 3 = Series IDs (1, 2, 3...)
//      Column 4 = Series labels (Mondrian, Picasso, Rothko...)
//     Series are used to:
//         a) vertically offset data series graphs using y_fixed_range;
//         b) set diff. color for each data series
//         c) draw labels
//  FIVE COLUMN DATA
//     Column 5 = image file names to render at x/y.

// ---------------------
// FLAGS: either 0 or 1

var             GUI_mode =     1;     // (1) GUI menus, (0) use default variables

var       batch_mode_flag =    1;     // display while drawing (0) or at end (1)
var       graph_save_flag =    0;     // save rather than displaying (1)
var           images_flag =    1;     // flag (0 or 1): draw images on top of dots
var           points_flag =    1;     // draw dots; if set to 0, and image_flag set to 1, only images are drawn
var     images_blend_flag =    1;     // (1) Blend mode copying of images
var          x_fixed_flag =    0;     // fixed range for X
var          y_fixed_flag =    0;     // fixed range for Y. Note: y_fixed_flag = 1 automatically if more than one data series
var     points_white_flag =    0;     // draw dots in white regardless of the color automatically set up for multiple series
var    points_values_flag =    1;     // draw values next to dot
var    points_series_flag =    1;     // draw value in column 4 (for example, artist name, category, etc.) next to dot
var     labels_white_flag =    0;     // draw labels next to dots in white regardless of the color used to draw dots
var           axis_x_flag =    1;     // draw axis lines x
var           axis_y_flag =    1;     // draw axis lines y
var         x_labels_flag =    1;     // draw labels for X axis
var           legend_flag =    1;     // draw legend for multiple series


// ---------------------
// VARIABLES

var data_default = "/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej-20.txt";
var data_filelist = newArray(
   "Open..."
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej.txt"
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej-3.txt"
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej-20.txt"
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/results.levimagej-20b.txt"
  );
var data_file = "";

var imagedir_default = "/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/"
var imagedir_filelist = newArray(
   "Open..."
  ,"/Users/jdouglass/Desktop/webcomics_project/A Humument/1970 1st edition/images-all/"
  ,"None"
  );
var image_dir = "";

// variables: graph

var         canvas_width =   800;     // total output width
var        canvas_height =   800;     // total output height
var               border =   100;     // space around the graph -- subtracted from canvas to leave draw space
var   image_resize_width =    64;     // resize width for thumbnails -- 0 or blank is original size
var            oval_size =    10;     // size of ovals to draw
var          labels_size =    12;     // font size for labels next to dots in the graph
var    canvas_colorspace = "RGB";     // RGB or 8-bit
var        fill_bg_color = newArray(16,0,0); // color for image background

var              x_scale =     4;     // factor to scale x image size - use fractions (i.e, 0.1) if x_max - x_min is too large
var              y_scale =     4;     // factor to scale y image size - use fractions (i.e, 0.1) if x_max - x_min is too large
var         x_axis_start =     0;     // starting x axis value
var        x_fixed_range =     0;     // e.g. 100 (1900-2000) instead of (xmax - xmin)
var         y_axis_start =     0;     // starting y axis value
var   y_fixed_range =     0;     // e.g. 255 (0-255) instead of (ymax - ymin); set to 0 to use data range

var               origin = newArray(0,0,0); // coordinate (x,y,series) for line drawing
var               ln_end = newArray(10,10,0); // coordinate (x,y,series) for line drawing

// variables: color pallete (8 colors)

var colors = newArray(130, 15, 0, 255, 74, 18, 254, 246, 226, 148, 179, 197, 116, 198, 241, 88, 107, 122, 62, 79, 79, 171, 197, 7); //  from beta.dailycolorscheme.com - 8 colors

// variables: legend, axis, ticks, labels

var            ds_labels = newArray(100); // unique data series labels; change if data contains >100 series
var          legend_size =    12;     // font size for the legend
var      axis_label_size =    12;     // font size for axis labels
var           axis_color = newArray(192,128,64); // color for axis and labels

var          tick_length =     5;     // axis tick lengths
var           line_width =     2;     // width of X,Y axis lines and horizontal separation lines
var         x_label_step =    20;     // step for drawing x labels: draw label and a a tick every x_label_step
var         y_label_step =    20;     // step for drawing y labels: draw label and a tick every y_label_step

// set default value -  if the data file only has 2 columns (X, Y), assume it is one data series;

var dmax = 1;
var   ds = 1;


// ---------------------
// FUNCTIONS

function plot_xy(x, y, ds) {
  // plot conversion -- takes raw data xy and series number d, returns absolute ImageJ pixel coordinates
  // For a series d, accepts the raw x/y and returns the plotting coordinates

  //   canvas   1000 x 1000
  // w borders   800 x  800 (100)
  //   data    x: 300               y: 5            d: 1
  //   range   x: 200 (200-400)     y: 20 (0-20)    d: 3 (1-3)

  plot_width  = (canvas_width  - (border*2));         //  1000 - 100*2      = 800
  plot_height = (canvas_height - (border*2)) / dmax;  // (1000 - 100*2) / 2 = 400

  if (x_fixed_flag == 1) { x_values_range = x_fixed_range; } else {  x_values_range = xmax - xmin; }      // 400 - 200 = 200
  if (y_fixed_flag == 1) { y_values_range = y_fixed_range; } else {  y_values_range = ymax - ymin; } //  20 -   0 =  20

  x_scale = plot_width / x_values_range;  // 800 / 200 =  4
  y_scale = plot_height / y_values_range; // 400 / 20  = 20

  // scale data to plot area
  x = ((x-xmin) * x_scale);               // (300-200) *  4 = 400
  y = ((y-ymin) * y_scale);               // ( 5 -  0) * 20 = 100

  // border offset
  x = x + border;
  y = y + border;

  // series offset
  y = y + ((ds-1)*plot_height);

  // switch y from cartesian graphing coordinate (lower left) to ImageJ coordinates (upper left)
  y = canvas_height - y;

  // can't return an array, so return a delimited string, then split
  return toString(x+" "+y+" "+ds);
}


// ---------------------
// SETUP

call("java.lang.System.gc"); // call Java garbage collector to free memory

// Load dialog

if (GUI_mode == 1) {

  Dialog.create("IMAGEPLOT");
  Dialog.addChoice   ("Data", data_filelist, data_default);
  Dialog.addChoice   ("Images", imagedir_filelist, imagedir_default);
  Dialog.addCheckbox ("...configure", GUI_mode);

  Dialog.show();

  data_file = Dialog.getChoice();
  image_dir = Dialog.getChoice();
  GUI_mode = Dialog.getCheckbox();

  if (data_file == "Open...") {
    path = File.openDialog("IMAGEPLOT \n LOAD DATA: \n Select tab-delimited text file"); // read in data file
  } else {
    path = data_file;
  }
  print("   path: ", path);
    text = File.openAsString(path);
  lines = split(text, "\n");
  print("   rows: " + lines.length);
  items = split(lines[0], ",\t");
  columns = items.length; // get the number of columns
  print("columns: "+columns);

  if (image_dir == "Open...")
    dir = getDirectory("IMAGEPLOT \n LOAD IMAGES: \n Choose directory containing images to plot");
  else if (image_dir == "None")
    images_flag = 0;
  else dir = image_dir;

}

// Configure dialogs

if (GUI_mode == 1) {

  Dialog.create ("IMAGEPLOT CONFIG");

  Dialog.addMessage ("--- Images ---");

    Dialog.addChoice   ("Color", newArray("RGB", "8-bit"), canvas_colorspace);
    Dialog.addCheckbox ("Blend", images_blend_flag);
    Dialog.addNumber   ("Thumbnail width", image_resize_width, 0, 5, "px");

  Dialog.addMessage ("--- Plot ---");

    Dialog.addCheckbox ("Plot points", points_flag);
    Dialog.addCheckbox ("... with values", points_values_flag);
    Dialog.addCheckbox ("... with series labels", points_series_flag);
    Dialog.addCheckbox ("Force dots white", points_white_flag);
    Dialog.addMessage  ("Note: overrides color for dots");
    Dialog.addCheckbox ("Force white labels", labels_white_flag);
    Dialog.addMessage  ("Note: overrides automatic colors for multiple series");

  Dialog.addMessage ("--- Canvas ---");

    Dialog.addMessage  ("Background color");
    Dialog.addNumber   ("R", fill_bg_color[0], 0, 5, "");
    Dialog.addNumber   ("G", fill_bg_color[1], 0, 5, "");
    Dialog.addNumber   ("B", fill_bg_color[2], 0, 5, "");
    Dialog.addNumber   ("Border size", border, 0, 5, "px");

  Dialog.addMessage ("--- Render ---");

    Dialog.addCheckbox ("Fast (hidden) render", batch_mode_flag);
    Dialog.addCheckbox ("Save w/out displaying?", graph_save_flag);

  Dialog.show();

    canvas_colorspace  = Dialog.getChoice(); // RGB color image
    images_blend_flag  = Dialog.getCheckbox();
    image_resize_width = Dialog.getNumber();

    points_flag        = Dialog.getCheckbox(); // Plot points
    points_values_flag = Dialog.getCheckbox();
    points_series_flag = Dialog.getCheckbox();
    points_white_flag  = Dialog.getCheckbox(); // Force dots white
    labels_white_flag  = Dialog.getCheckbox(); // Force labels white

    fill_bg_color[0]   = Dialog.getNumber();
    fill_bg_color[1]   = Dialog.getNumber();
    fill_bg_color[2]   = Dialog.getNumber();
    border             = Dialog.getNumber();

    batch_mode_flag    = Dialog.getCheckbox(); // Display while drawing
    graph_save_flag    = Dialog.getCheckbox(); // Save without displaying

  Dialog.create ("IMAGEPLOT CONFIG AXES");

  Dialog.addMessage ("--- Axes ---");

    Dialog.addCheckbox ("X axis lines", axis_x_flag);
    Dialog.addCheckbox ("Y axis lines", axis_y_flag);
    Dialog.addNumber   ("Axis tick length", tick_length, 0, 5, "px");
    Dialog.addNumber   ("Line width (axes, separators)", line_width, 0, 5, "px");

  Dialog.addMessage ("--- Axis Labels ---");

    Dialog.addCheckbox ("X axis labels", x_labels_flag);
    Dialog.addNumber   ("Axis label font size", axis_label_size, 0, 5, "pt");
    Dialog.addMessage  ("Axis color");
    Dialog.addNumber   ("R", axis_color[0], 0, 5, "");
    Dialog.addNumber   ("G", axis_color[1], 0, 5, "");
    Dialog.addNumber   ("B", axis_color[2], 0, 5, "");
    Dialog.addNumber   ("X label step", x_label_step, 0, 5, "");
    Dialog.addNumber   ("Y label step", y_label_step, 0, 5, "");

  Dialog.addMessage ("--- Legend ---");

    Dialog.addCheckbox ("Legend for series", legend_flag);
    Dialog.addNumber   ("Legend font size", legend_size, 0, 5, "pt");

  Dialog.addMessage ("--- Axis Ranges ---");

    Dialog.addCheckbox ("X range fixed?", x_fixed_flag);
    Dialog.addCheckbox ("Y range fixed?", y_fixed_flag);
    Dialog.addMessage  ("Note: y range always fixed for more than one series");
    Dialog.addNumber   ("starting x axis value", x_axis_start, 0, 5, "");
    Dialog.addNumber   ("X fixed range", x_fixed_range, 0, 5, "units");
    Dialog.addMessage  ("Note: e.g. 100 (1900-2000); 0 uses (xmax - xmin)");
    Dialog.addNumber   ("starting y axis value", y_axis_start, 0, 5, "unit");
    Dialog.addNumber   ("Y fixed range", y_fixed_range, 0, 5, "units");
    Dialog.addMessage  ("Note: e.g. 255 (0-255); 0 uses (ymax - ymin)");
    Dialog.addNumber   ("X scale factor", x_scale, 0, 5, "px/unit");
    Dialog.addNumber   ("Y scale factor", y_scale, 0, 5, "px/unit");
    Dialog.addNumber   ("Oval size", oval_size, 0, 5, "px");
    Dialog.addNumber   ("Label font size", labels_size, 0, 5, "pt");

  Dialog.show();

    axis_x_flag        = Dialog.getCheckbox();
    axis_y_flag        = Dialog.getCheckbox();
    tick_length        = Dialog.getNumber();
    line_width         = Dialog.getNumber();
                       
    x_labels_flag      = Dialog.getCheckbox();
    axis_label_size    = Dialog.getNumber();
    axis_color[0]      = Dialog.getNumber();
    axis_color[1]      = Dialog.getNumber();
    axis_color[2]      = Dialog.getNumber();
    x_label_step       = Dialog.getNumber();
    y_label_step       = Dialog.getNumber();
                       
    legend_flag        = Dialog.getCheckbox();
    legend_size        = Dialog.getNumber();
                       
    x_fixed_flag       = Dialog.getCheckbox();
    y_fixed_flag       = Dialog.getCheckbox();
    x_axis_start       = Dialog.getNumber();
    x_fixed_range      = Dialog.getNumber();
    y_axis_start       = Dialog.getNumber();
    y_fixed_range = Dialog.getNumber();
    x_scale            = Dialog.getNumber();
    y_scale            = Dialog.getNumber();
    oval_size          = Dialog.getNumber();
    labels_size        = Dialog.getNumber();

}


// ---------------------
// CALCULATE

// Series

// calculate the number of data series and read in data series labels
// dmax is set to 1 by default

if (columns > 3) { // if data series numbers and labels are present - i.e., data has at least 4 columns
  labels_max = 0;
  ds = 0;
  for (i=0; i<lines.length; i++) {
    items=split(lines[i], ",\t"); // read in data row
    ds = parseInt(items[2]);      // read data series number (column 3)
    if (ds > dmax)                // if a new data series number is encountered
      dmax = ds;                  // set dmax to this number
    if (ds > labels_max) {        // if a new data series number is encountered
      labels_max = ds;
      ds_labels[labels_max-1]=items[3]; // read the label corresponding to this number (column 4)
    }
  }
  print("number of data series as specified in column 3 = " + dmax);
  print("ds_labels: "+ ds_labels[0]);// debug
}

// Canvas, draw, and plot sizes

// max and min values

items=split(lines[0], ",\t");
xmax=items[0];
ymax=items[1];
xmin=items[0];
ymin=items[1];

for (i=0; i<lines.length; i++) {
  items=split(lines[i], ",\t");
  x = parseInt(items[0]);
  y = parseInt(items[1]);
  if (x>xmax) xmax = x;
  if (x<xmin) xmin = x;
  if (y>ymax) ymax = y;
  if (y<ymin) ymin = y;
}

print("xmax           = "+xmax);
print("xmin           = "+xmin);
print("ymax           = "+ymax);
print("ymin           = "+ymin);

// range

x_values_range = xmax - xmin;
y_values_range = ymax - ymin;
if (x_fixed_flag == 1) { x_values_range = x_fixed_range; }
if (y_fixed_flag == 1) { y_values_range = y_fixed_range; }

print("x_values_range = " +x_values_range);
print("y_values_range = " +y_values_range);

// define the drawing and plotting area

print("border         = "+border);
print("canvas width   = "+canvas_width);
print("canvas height  = "+canvas_height);

draw_width  = (canvas_width  - (border*2));
draw_height = (canvas_height - (border*2));

print("  draw width   = "+draw_width);
print("  draw height  = "+draw_height);

ln_origin = split(plot_xy(0, 0, 1), ""); // plot_xy returns a string of delimited values
x = ln_origin[0];
y = ln_origin[1];

print("     x origin  = "+ln_origin[0]);
print("     y origin  = "+ln_origin[1]);

plot_width  = draw_width;
plot_height = draw_height / dmax;

print("  plot width   = "+draw_width);
print("  plot height  = "+draw_height);

x_scale = plot_width / x_values_range;
y_scale = plot_height / y_values_range;

print("plot width     = "+plot_width);
print("plot height    = "+plot_height);
print("   x scale     = "+x_scale);
print("   y scale     = "+y_scale);


// -----------------------------------------
// MAKE CANVAS

// set to display the graph as it is being made
  if(batch_mode_flag == 1)
    setBatchMode(true);

  print("making image "+ canvas_width + " x " + canvas_height);
  newImage("IMAGEPLOT", ""+canvas_colorspace+" black", canvas_width, canvas_height, 1);
  setColor(fill_bg_color[0], fill_bg_color[1], fill_bg_color[2]);
  fill();
  id_plot=getImageID;


// -----------------------------------------
// SET DRAWING PARAMETERS

//set up font, drawing color for labels and axis lines, and line width
  setFont("SansSerif", axis_label_size, "antialiased");
  setJustification("left");
  setColor(axis_color[0], axis_color[1], axis_color[2]);
  setLineWidth(line_width);

// set up blending mode
  if (images_blend_flag == 1)
    setPasteMode("Blend"); // blend overlapping images
  else
    setPasteMode("Copy");

//set up offsets axis labels
  x_label_offset = 0; // = round(axis_label_size*1.4);
  y_label_offset = round(axis_label_size*1.5);

// set up the length of horizontal separation line between each data series
//  tick_ds_length = plot_width;


// -----------------------------------------
// DRAW AXIS, LABELS

// draw horizontal axis and vertical axis

if (axis_y_flag == 1) {
  for (i=0; i < dmax; i++) {
      drawLine(border, border+(plot_height*(i+1)), border, 10 + border+(plot_height*(i)));
  }
}

if (axis_x_flag == 1 ) {
  for (i=0; i < dmax; i++) {   // skip drawing first separation line
      drawLine(border, border+(plot_height*(i+1)), border + plot_width, border+(plot_height*(i+1))); // horizontal separation line between each data series
  }
}

// -----------------------
// draw y label -- NEEDS TO BE ADDED


// -----------------------
// draw x label

if (x_labels_flag == 1) {

  if (x_fixed_flag == 0) {
    label_value = xmin;
    label_last = xmax;
  } else {
    label_value = x_axis_start;
    label_last = x_axis_start + x_values_range;
  }
  print("label_value:"+label_value+"  label_last:"+label_last); // debug

  for (i=xmin; i < xmax; i=i+x_label_step)  {
    ln_origin = split(plot_xy(i, ymin, 1), ""); // plot_xy returns a string of delimited values
    x = ln_origin[0];
    y = ln_origin[1];
    label_value = i;
    drawLine( x, y, x, y - tick_length); // draw axis tick line    
    drawString(i, x-x_label_offset, y); // draw axis label
	}
	if (label_value != label_last) { // end cap line
    ln_origin = split(plot_xy(xmax, ymin, 1), ""); // plot_xy returns a string of delimited values
    x = ln_origin[0];
    y = ln_origin[1];
    drawLine( x, y, x, y - tick_length); // draw axis tick line  
    if (label_value > label_last-(0.75*x_label_step)) // smart xmax label
      drawString(xmax, x-x_label_offset, y);
	}
}

// -----------------------------------------
// DRAW LEGEND

if (legend_flag == 1) {
  if (columns > 3) {
    setFont("SansSerif", legend_size, "antialiased");
    x = oval_size + legend_size;
    y_start = (oval_size + legend_size)*dmax;
    for (i=0; i < dmax; i++)  {
      y = y_start - i*(oval_size + legend_size);
      setColor(colors[3*i], colors[3*i+1], colors[3*i+2] ); //  set up colors using the number of data series
      fillOval(x - (oval_size / 2), y - (oval_size / 2), oval_size, oval_size);
      drawString(ds_labels[i], x, y); // draw legends
    }
  }
}



// -----------------------------------------
// LOOP THROUGH DATA ROWS TO MAKE GRAPH

setColor(255, 0, 0);
// set default color for dots
setFont("SansSerif", labels_size, "antialiased");
// set font size for drawing labels next to poins

// start loop

for (i = 0; i < lines.length; i++) {

    items = split(lines[i], ",\t");

    x = parseInt(items[0]);
    // x-values
    y = parseInt(items[1]);
    // y-values
    if (columns > 2) {
        ds = parseInt(items[2]);
        // read the number of data series
        setColor(colors[3 * (ds - 1)], colors[3 * (ds - 1) + 1], colors[3 * (ds - 1) + 2]);
        //  set up colors using  the number of data series
        //only works with 8 data series since colors array contains 8 sets of R,G,B values
    }

    // convert coordinates from data to plot
    ln_origin = split(plot_xy(x, y, ds), ""); // plot_xy returns a string of delimited values
    x = ln_origin[0];
    y = ln_origin[1];

    // draw

    if (y > 0) {
        // option: draw label only if (y > 0)

        // draw point
        if (points_flag == 1) {
            if (points_white_flag == 1) { setColor(255, 255, 255); }
            fillOval(x - (oval_size / 2), y - (oval_size / 2), oval_size, oval_size);
        }

        // draw value labels
        if (labels_white_flag == 1) {
            setColor(255, 255, 255);
        }
        // option: always use white labels
        if (points_values_flag == 1) {
            drawString(items[0] + ", " + items[1], x, y);
        }
        if (points_series_flag == 1) {
            // option: draw value in column 4 (you can put anything there)
            label_name = items[3];
            // get the string contained in 4th column
            if (points_values_flag == 1) {
                drawString(label_name, x, y-labels_size);
            }
            else {
                drawString(label_name, x, y-labels_size);
            }
            // add offset here
        }

        // draw images
        if (images_flag == 1) {
            showProgress(i, lines.length);
            // show progress in imageJ menu bar
            image_path = dir + items[4];
            open(image_path);
            if (image_resize_width > 0) {
                run("Size...", "width=" + image_resize_width + " constrain interpolate");
            }
            image_width = getWidth;
            image_height = getHeight;
            run("Copy");
            // copy to memory
            close();
            // close the image file
            selectImage(id_plot);
            // select graph image
            makeRectangle(x, y, image_width, image_height);
            // default - drawing at the right coordinate
            run("Paste");
        }

    }

}

print("graph finished");

if (batch_mode_flag == 1) {
    if (graph_save_flag == 0)
    setBatchMode(false);
    // make the plot image visible
    else {
        // do not make the plot image visible - instead go to file save (use this for very large graphs)
        selectImage(id_plot);
        saveAs("JPG");
    }
}
